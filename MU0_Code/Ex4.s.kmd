KMD
00000000:       ; ; Begin program at reset address. Acc, pc, and ir should all be 0 after reset
00000000:       ;         ORG 0
00000000:       ; 
00000000: 4210  ; JMP reset
00000001:       ; main
00000001: 4002  ;         JMP write_play
00000002:       ; 
00000002:       ; write_play
00000002: 0236  ;         LDA P_Segment
00000003: 1FF8  ;         STA Digit3
00000004: 0232  ;         LDA L_Segment
00000005: 1FF7  ;         STA Digit2
00000006: 0227  ;         LDA A_Segment
00000007: 1FF6  ;         STA Digit1
00000008: 023F  ;         LDA Y_Segment
00000009: 1FF5  ;         STA Digit0
0000000A: 400B  ;         JMP DISPLAY_YES_NO_LIGHTS
0000000B:       ; 
0000000B:       ; DISPLAY_YES_NO_LIGHTS
0000000B: 0278  ;         LDA PEDCROSS_GREEN
0000000C: 227C  ;         ADD PEDCROSSPED_GREEN
0000000D: 227F  ;         ADD TRAFFICUP_RED
0000000E: 2282  ;         ADD TRAFFICLEFT_RED
0000000F: 1FFF  ;         STA TrafficLights
00000010: 4011  ;         JMP wait_play_input
00000011:       ; 
00000011:       ; wait_play_input
00000011: 0FF0  ;         LDA Simple
00000012: 6014  ;         JNE parse_input
00000013: 4011  ;         JMP wait_play_input
00000014:       ; 
00000014:       ; parse_input
00000014:       ;         ; 4 options
00000014:       ;         ; 1000 or 0100 is no
00000014:       ;         ; 0010 or 0001 is yes
00000014: 1264  ;         STA ToCheck
00000015: 327B  ;         SUB PEDCROSSPED_RED ; this is the most significant bit or 0b1000
00000016: 521C  ;         JGE end
00000017:       ;         ; the button pressed was not the mist sogniignificant bit
00000017: 0264  ;         LDA ToCheck
00000018: 327A  ;         SUB PEDCROSS_RED
00000019: 521C  ;         JGE end
0000001A:       ;         ; At this point is must be either of the least significant bits so we can just jump to yes
0000001A: 401B  ;         JMP write_wait
0000001B:       ; 
0000001B:       ; write_wait
0000001B: 023D  ;         LDA W_Segment
0000001C: 1FF8  ;         STA Digit3
0000001D: 0227  ;         LDA A_Segment
0000001E: 1FF7  ;         STA Digit2
0000001F: 022F  ;         LDA I_Segment
00000020: 1FF6  ;         STA Digit1
00000021: 023A  ;         LDA T_Segment
00000022: 1FF5  ;         STA Digit0
00000023:       ; 
00000023:       ; ; turn all LEDS red
00000023:       ; 
00000023: 024C  ; LDA Zero
00000024: 1FFF  ; STA TrafficLights ; turn off all LEDS
00000025: 227A  ; ADD PEDCROSS_RED
00000026: 227B  ; ADD PEDCROSSPED_RED
00000027: 2282  ; ADD TRAFFICLEFT_RED
00000028: 227F  ; ADD TRAFFICUP_RED
00000029: 1FFF  ; STA TrafficLights
0000002A:       ; 
0000002A:       ; ; FIGURE OUT HOW THE BUZZER WORKS
0000002A:       ; 
0000002A:       ; ; load buzzer
0000002A:       ; check_buzzer
0000002A: 0FF3  ; LDA BuzzerStatus
0000002B: 602A  ; JNE check_buzzer
0000002C:       ; 
0000002C:       ; buzzer_one
0000002C: 0268  ; LDA BuzzerNoiseOne
0000002D: 1FFD  ; STA Buzzer
0000002E:       ; 
0000002E:       ; ; get bit 0
0000002E:       ; ; check if bit 0 is 0
0000002E:       ; ; if yes then configure buzzer
0000002E:       ; ; finish
0000002E:       ; 
0000002E:       ; ; pseudo random One
0000002E:       ; random_one
0000002E: 026E  ;         LDA mul
0000002F: 0267  ;         LDA tempOne
00000030:       ;                 Multiply_loop
00000030: 1266  ;                 STA temp
00000031: 026F  ;                 LDA seed
00000032: 2267  ;                 ADD tempOne
00000033: 126F  ;                 STA seed
00000034: 0266  ;                 LDA temp
00000035: 324D  ;                 SUB One
00000036: 6030  ;                 JNE Multiply_loop
00000037:       ; 
00000037: 026F  ;         LDA seed
00000038: 226D  ;         ADD inc
00000039: 126F  ;         STA seed
0000003A:       ;                 mod_loop
0000003A: 326C  ;                 SUB mod
0000003B: 503A  ;                 JGE mod_loop
0000003C:       ; 
0000003C:       ;         ; if we are here the number is negative, adding mod will correct it
0000003C:       ; 
0000003C: 226C  ;         ADD mod
0000003D: 126F  ;         STA seed
0000003E:       ; 
0000003E:       ;         ; at this point seed should be a pseudo random num between 0 and 10000
0000003E:       ; 
0000003E:       ; ; to have a semi accurate delay i am using a double nested loop where the random number will be the t
                ; ime in ms that the delay should be
0000003E:       ; ; this will be initialising the loop
0000003E: 026F  ; LDA seed
0000003F: 1266  ; STA temp
00000040: 0262  ; LDA Delay 
00000041: 1267  ; STA tempOne
00000042:       ; 
00000042:       ;                 inner_loop
00000042: 0267  ;                 LDA tempOne
00000043: 324D  ;                 SUB One
00000044: 1267  ;                 STA tempOne
00000045: 6042  ;                 JNE inner_loop 
00000046:       ;                 ; at this point we should of hade a (roughly 1ms delay)
00000046:       ; 
00000046: 0262  ;         LDA Delay ; reinitialise the loop
00000047: 1267  ;         STA tempOne
00000048:       ; 
00000048: 0266  ;         LDA temp
00000049: 324D  ;         SUB One
0000004A: 1266  ;         STA temp
0000004B: 6042  ;         JNE inner_loop
0000004C:       ; 
0000004C:       ; 
0000004C:       ; check_buzzer_one
0000004C: 0FF3  ; LDA BuzzerStatus
0000004D: 604C  ; JNE check_buzzer_one
0000004E:       ; 
0000004E: 0269  ; LDA BuzzerNoiseTwo
0000004F: 1FFD  ; STA Buzzer
00000050:       ; 
00000050:       ; ; At this point we need to add amber to the LEDS
00000050: 0FFF  ; LDA TrafficLights
00000051: 2279  ; ADD PEDCROSS_AMBER
00000052: 2281  ; ADD TRAFFICLEFT_AMBER
00000053: 227E  ; ADD TRAFFICUP_AMBER
00000054: 1FFF  ; STA TrafficLights
00000055:       ; 
00000055:       ; 
00000055:       ; 
00000055:       ; 
00000055:       ; ; generate another random delay and apply it
00000055:       ; 
00000055:       ; ; pseudo random one
00000055:       ; random_two
00000055: 026E  ;         LDA mul
00000056: 1267  ;         STA tempOne
00000057:       ;                 Multiply_loop_two
00000057: 1266  ;                 STA temp
00000058: 026F  ;                 LDA seed
00000059: 2267  ;                 ADD tempOne
0000005A: 126F  ;                 STA seed
0000005B: 0266  ;                 LDA temp
0000005C: 324D  ;                 SUB One
0000005D: 6057  ;                 JNE Multiply_loop_two
0000005E:       ; 
0000005E: 026F  ;         LDA seed
0000005F: 226D  ;         ADD inc
00000060: 126F  ;         STA seed
00000061:       ; 
00000061:       ;                 mod_loop_two
00000061: 326C  ;                 SUB mod
00000062: 5061  ;                 JGE mod_loop_two
00000063:       ; 
00000063:       ;         ; if we are here the number is negative and is modulused we only need to convert it to positi
                ; ve
00000063:       ; 
00000063: 226C  ;         ADD mod
00000064: 126F  ;         STA seed
00000065:       ; 
00000065:       ;         ; at this point seed should be a pseudo random num between 0 and 10000
00000065:       ; 
00000065:       ; ; to have a semi accurate delay i am using a double nested loop where the random number will be the t
                ; ime in ms that the delay should be
00000065:       ; ; this will be initialising the loop
00000065: 026F  ; LDA seed
00000066: 1266  ; STA temp
00000067: 0262  ; LDA Delay 
00000068: 1267  ; STA tempOne
00000069:       ; 
00000069:       ;                 inner_loop_two
00000069: 0267  ;                 LDA tempOne
0000006A: 324D  ;                 SUB One
0000006B: 1267  ;                 STA tempOne
0000006C: 6069  ;                 JNE inner_loop_two 
0000006D:       ;                 ; at this point we should of hade a (roughly 1ms delay)
0000006D:       ; 
0000006D: 0262  ;         LDA Delay ; reinitialise the loop
0000006E: 1267  ;         STA tempOne
0000006F:       ; 
0000006F: 0266  ;         LDA temp
00000070: 324D  ;         SUB One
00000071: 1266  ;         STA temp
00000072: 6069  ;         JNE inner_loop_two
00000073:       ; 
00000073:       ; 
00000073:       ; ; here we need to randomly generate which button should be the correct input (and which LED to set to
                ;   green)
00000073:       ; 
00000073:       ; ; check if useOne is One
00000073: 0270  ; LDA useOne
00000074: 608A  ; JNE gen_using_one; is useOne is not zero (True) then use One 
00000075:       ; ; use One is 0 so change it to One
00000075: 224D  ; ADD One
00000076: 1270  ; STA useOne
00000077:       ; 
00000077:       ; ; useOne was true so we need to flip it to false (store 0)
00000077: 024C  ; LDA Zero
00000078: 1270  ; STA useOne
00000079:       ; 
00000079:       ; ; pseudo random two
00000079:       ; random_button_two
00000079: 0276  ;         LDA mul_two
0000007A: 1267  ;         STA tempOne
0000007B:       ;         Multiply_loop_button_two
0000007B: 1266  ;                 STA temp
0000007C: 0277  ;                 LDA seed_two
0000007D: 2267  ;                 ADD tempOne
0000007E: 1277  ;                 STA seed_two
0000007F: 0266  ;                 LDA temp
00000080: 324D  ;                 SUB One
00000081: 607B  ;                 JNE Multiply_loop_button_two
00000082:       ; 
00000082: 0277  ;         LDA seed_two
00000083: 2275  ;         ADD inc_two
00000084:       ; 
00000084:       ;         mod_loop_button_two
00000084: 3271  ;                 SUB mod_button
00000085: 5084  ;                 JGE mod_loop_button_two
00000086:       ; 
00000086:       ;         ; if we are here the number is negative and is modulused we only need to convert it to positi
                ; ve
00000086:       ; 
00000086: 2271  ;         ADD mod_button
00000087: 1277  ;         STA seed_two
00000088: 1266  ;         STA temp
00000089:       ; 
00000089: 409D  ;         JMP calculate_button_bit_pattern 
0000008A:       ; 
0000008A:       ; gen_using_one
0000008A:       ;         ; useOne was true so we need to flip it to false (store 0)
0000008A: 024C  ;         LDA Zero
0000008B: 1270  ;         STA useOne
0000008C:       ;         
0000008C:       ;         ; pseudo random One
0000008C:       ;         random_button_one
0000008C: 0273  ;                 LDA mul_one
0000008D: 1267  ;                 STA tempOne
0000008E:       ;                 Multiply_loop_button_one
0000008E: 1266  ;                         STA temp
0000008F: 0274  ;                         LDA seed_one
00000090: 2267  ;                         ADD tempOne
00000091: 1274  ;                         STA seed_one
00000092: 0266  ;                         LDA temp
00000093: 324D  ;                         SUB One
00000094: 608E  ;                         JNE Multiply_loop_button_one
00000095:       ; 
00000095: 0274  ;                 LDA seed_one
00000096: 2272  ;                 ADD inc_one
00000097: 1274  ;                 STA seed_one
00000098:       ; 
00000098:       ;                 mod_loop_button_one
00000098: 3271  ;                         SUB mod_button
00000099: 5098  ;                         JGE mod_loop_button_one
0000009A:       ; 
0000009A:       ;                 ; if we are here the number is negative and is modulused we only need to convert it t
                ; o positive
0000009A:       ; 
0000009A: 2271  ;                 ADD mod_button
0000009B: 1274  ;                 STA seed_one
0000009C: 1266  ;                 STA temp
0000009D:       ; 
0000009D:       ; calculate_button_bit_pattern
0000009D:       ; 
0000009D:       ; 
0000009D:       ; ; the button number should be stored in temp we are going to logical shift One by this number
0000009D: 024D  ; LDA One
0000009E: 1267  ; STA tempOne
0000009F: 0266  ; LDA temp
000000A0: 60A2  ; JNE shift_left
000000A1: 40A9  ; JMP show_correct_green
000000A2:       ; shift_left
000000A2: 0267  ;         LDA tempOne
000000A3: 2267  ;         ADD tempOne
000000A4: 1267  ;         STA tempOne
000000A5: 0266  ;         LDA temp
000000A6: 324D  ;         SUB One
000000A7: 1266  ;         STA temp
000000A8: 60A2  ;         JNE shift_left
000000A9:       ; 
000000A9:       ; ; tempOne now contains the bit pattern that we need to check
000000A9:       ; ; reset the lights
000000A9:       ; 
000000A9:       ; show_correct_green
000000A9:       ; 
000000A9: 024C  ; LDA Zero
000000AA: 1FFF  ; STA TrafficLights
000000AB:       ; 
000000AB:       ; ; figure out which set of lights to set
000000AB: 0267  ; LDA tempOne
000000AC: 1264  ; STA ToCheck
000000AD: 327B  ; SUB PEDCROSSPED_RED ; this is the most significant bit or 0b1000
000000AE: 50BE  ; JGE show_four_green
000000AF:       ; ; the button pressed was not the most significant bit
000000AF: 0264  ; LDA ToCheck
000000B0: 327A  ; SUB PEDCROSS_RED ; 0100
000000B1: 50BB  ; JGE show_three_green
000000B2: 0264  ; LDA ToCheck
000000B3: 3279  ; SUB PEDCROSS_AMBER  ; 0010
000000B4: 50B8  ; JGE show_two_green
000000B5:       ; ; the bit pattern must be 0001
000000B5: 0278  ; LDA PEDCROSS_GREEN
000000B6: 1FFF  ; STA TrafficLights
000000B7: 40C0  ; JMP buzz_go
000000B8:       ; 
000000B8:       ; show_two_green
000000B8: 027C  ; LDA PEDCROSSPED_GREEN
000000B9: 1FFF  ; STA TrafficLights
000000BA: 40C0  ; JMP buzz_go
000000BB:       ; 
000000BB:       ; show_three_green
000000BB: 027D  ; LDA TRAFFICUP_GREEN
000000BC: 1FFF  ; STA TrafficLights
000000BD: 40C0  ; JMP buzz_go
000000BE:       ; 
000000BE:       ; show_four_green
000000BE: 0280  ; LDA TRAFFICLEFT_GREEN
000000BF: 1FFF  ; STA TrafficLights
000000C0:       ; 
000000C0:       ; buzz_go
000000C0:       ; check_buzzer_two
000000C0: 0FF3  ; LDA BuzzerStatus
000000C1: 60C0  ; JNE check_buzzer_two
000000C2:       ; 
000000C2: 026A  ; LDA BuzzerNoiseThree
000000C3: 1FFD  ; STA Buzzer
000000C4:       ; 
000000C4:       ; show_press
000000C4: 0236  ; LDA P_Segment
000000C5: 1FF9  ; STA Digit4
000000C6: 0238  ; LDA R_Segment
000000C7: 1FF8  ; STA Digit3
000000C8: 022B  ; LDA E_Segment
000000C9: 1FF7  ; STA Digit2
000000CA: 0239  ; LDA S_Segment
000000CB: 1FF6  ; STA Digit1
000000CC: 0239  ; LDA S_Segment
000000CD: 1FF5  ; STA Digit0
000000CE:       ; 
000000CE: 024C  ; LDA Zero
000000CF: 1260  ; STA Counter
000000D0: 125B  ; STA TenMsCounter
000000D1:       ; 
000000D1:       ; wait_for_input
000000D1: 0FF0  ;         LDA Simple
000000D2: 60E5  ;         JNE validate_input
000000D3: 0260  ;         LDA Counter
000000D4: 2257  ;         ADD Ten ; add more
000000D5: 1260  ;         STA Counter
000000D6: 3261  ;         SUB MaxPos
000000D7: 50D9  ;         JGE ms_counter
000000D8: 40D1  ;         JMP wait_for_input
000000D9:       ; 
000000D9:       ; ms_counter
000000D9: 025B  ;       LDA TenMsCounter
000000DA: 2257  ;       ADD Ten
000000DB: 2257  ;       ADD Ten
000000DC: 125B  ;       STA TenMsCounter
000000DD: 024C  ;       LDA Zero
000000DE: 1260  ;       STA Counter
000000DF: 40D1  ;       JMP wait_for_input
000000E0:       ; 
000000E0:       ; wrong_buzz
000000E0:       ;         check_buzzer_three
000000E0: 0FF3  ;         LDA BuzzerStatus
000000E1: 60E0  ;         JNE check_buzzer_three
000000E2: 026B  ;         LDA BuzzerNoiseFour 
000000E3: 1FFD  ;         STA Buzzer
000000E4: 40D1  ;         JMP wait_for_input
000000E5:       ; 
000000E5:       ; validate_input
000000E5: 3264  ;         SUB ToCheck
000000E6: 60E0  ;         JNE wrong_buzz
000000E7:       ; 
000000E7:       ; ; the input was correct
000000E7:       ; ; the TenMsCounter holds the (rough) time. 
000000E7:       ; ; divide by 100 to get time in seconds
000000E7:       ; 
000000E7:       ; ; get 10ms units(MOD 10)
000000E7: 025B  ; LDA TenMsCounter
000000E8:       ; tenth_loop
000000E8: 3257  ; SUB Ten
000000E9: 50E8  ; JGE tenth_loop
000000EA: 2257  ; ADD Ten
000000EB: 125E  ; STA Tenths
000000EC:       ; 
000000EC:       ; 
000000EC:       ; ; get 100 ms    (//10)   (MOD 100 - units)
000000EC: 025B  ; LDA TenMsCounter
000000ED:       ; hundreths_loop
000000ED: 3258  ; SUB Hundred
000000EE: 50ED  ; JGE hundreths_loop
000000EF: 2258  ; ADD Hundred
000000F0: 325E  ; SUB Tenths
000000F1: 1266  ; STA temp
000000F2:       ; 
000000F2: 024C  ; LDA Zero
000000F3: 125F  ; STA Hundreths
000000F4: 0266  ; LDA temp
000000F5: 60F7  ; JNE hundred_loop_div
000000F6: 40FD  ; JMP seconds
000000F7:       ; 
000000F7:       ; hundred_loop_div
000000F7: 025F  ; LDA Hundreths
000000F8: 224D  ; ADD One
000000F9: 125F  ; STA Hundreths
000000FA: 0266  ; LDA temp
000000FB: 3258  ; SUB Hundred 
000000FC: 50F7  ; JGE hundred_loop_div
000000FD:       ; 
000000FD:       ; seconds
000000FD:       ; ; get seconds    (//100)  (MOD 1000 - MOD 100 - MOD10)
000000FD: 025B  ; LDA TenMsCounter
000000FE:       ; units_loop
000000FE: 3259  ; SUB Thousand
000000FF: 50FE  ; JGE units_loop
00000100: 2259  ; ADD Thousand
00000101: 325F  ; SUB Hundreths
00000102: 325E  ; SUB Tenths
00000103: 1266  ; STA temp
00000104:       ; ; get 10 seconds (//1000) (MOD 10000 - MOD 1000 - MOD 100 - MOD10)
00000104:       ; 
00000104:       ; thousand_loop_div
00000104: 025D  ; LDA Units
00000105: 224D  ; ADD One
00000106: 125D  ; STA Units
00000107: 0266  ; LDA temp
00000108: 3259  ; SUB Thousand 
00000109: 5104  ; JGE thousand_loop_div
0000010A:       ; 
0000010A: 025B  ; LDA TenMsCounter
0000010B:       ; tens_loop
0000010B: 325A  ; SUB TenThousand
0000010C: 510B  ; JGE tens_loop
0000010D: 225A  ; ADD TenThousand
0000010E: 325D  ; SUB Units
0000010F: 325F  ; SUB Hundreths
00000110: 325E  ; SUB Tenths
00000111: 1266  ; STA temp
00000112:       ; 
00000112:       ; ten_thousand_loop_div
00000112: 025C  ; LDA Tens
00000113: 224D  ; ADD One
00000114: 125C  ; STA Tens
00000115: 0266  ; LDA temp
00000116: 325A  ; SUB TenThousand 
00000117: 5112  ; JGE ten_thousand_loop_div
00000118:       ; 
00000118:       ; show_you
00000118: 024C  ;         LDA Zero
00000119: 1FF9  ;         STA Digit4
0000011A: 1FF8  ;         STA Digit3
0000011B: 023F  ;         LDA Y_Segment
0000011C: 1FF7  ;         STA Digit2
0000011D: 0235  ;         LDA O_Segment
0000011E: 1FF6  ;         STA Digit1
0000011F: 023B  ;         LDA U_Segment
00000120: 1FF5  ;         STA Digit0
00000121:       ; 
00000121:       ; ;wait 1s 
00000121: 0259  ; LDA Thousand
00000122: 1266  ; STA temp
00000123: 0262  ; LDA Delay 
00000124: 1267  ; STA tempOne
00000125:       ; 
00000125:       ;                 inner_loop_one_second 
00000125: 0267  ;                 LDA tempOne
00000126: 324D  ;                 SUB One
00000127: 1267  ;                 STA tempOne
00000128: 6125  ;                 JNE inner_loop_one_second 
00000129:       ;                 ; at this point we should of hade a (roughly 1ms delay)
00000129:       ; 
00000129: 0262  ;         LDA Delay ; reinitialise the loop
0000012A: 1267  ;         STA tempOne
0000012B:       ; 
0000012B: 0266  ;         LDA temp
0000012C: 324D  ;         SUB One
0000012D: 1266  ;         STA temp
0000012E: 6125  ;         JNE inner_loop_one_second
0000012F:       ; 
0000012F:       ; show_took
0000012F: 023A  ;         LDA T_Segment
00000130: 1FF8  ;         STA Digit3
00000131: 0235  ;         LDA O_Segment
00000132: 1FF7  ;         STA Digit2
00000133: 0235  ;         LDA O_Segment
00000134: 1FF6  ;         STA Digit1
00000135: 0231  ;         LDA K_Segment
00000136: 1FF5  ;         STA Digit0
00000137:       ; 
00000137:       ; 
00000137: 0259  ; LDA Thousand
00000138: 1266  ; STA temp
00000139: 0262  ; LDA Delay 
0000013A: 1267  ; STA tempOne
0000013B:       ; 
0000013B:       ;                 inner_loop_one_second_again
0000013B: 0267  ;                 LDA tempOne
0000013C: 324D  ;                 SUB One
0000013D: 1267  ;                 STA tempOne
0000013E: 613B  ;                 JNE inner_loop_one_second_again 
0000013F:       ;                 ; at this point we should of hade a (roughly 1ms delay)
0000013F:       ; 
0000013F: 0262  ;         LDA Delay ; reinitialise the loop
00000140: 1267  ;         STA tempOne
00000141:       ; 
00000141: 0266  ;         LDA temp
00000142: 324D  ;         SUB One
00000143: 1266  ;         STA temp
00000144: 613B  ;         JNE inner_loop_one_second_again
00000145:       ; 
00000145:       ; 
00000145:       ; ; some how figure out how to convert decimal to segment display
00000145:       ; ; the units were extracted before do 10 if statements and copy and paste
00000145:       ; ; SHOULD BE TEN UNIT . TENTHS HUNDRETHS
00000145:       ; ;       Digit3 Digit2  Digit1  Digit0
00000145:       ; 
00000145: 025C  ; LDA Tens
00000146:       ; 
00000146: 3255  ;         SUB Nine
00000147: 614A  ;         JNE NotNine
00000148: 024A  ;         LDA Nine_Segment
00000149: 4173  ;         JMP write_digit3
0000014A:       ; 
0000014A:       ;         NotNine
0000014A: 2255  ;         ADD Nine
0000014B: 3254  ;         SUB Eight
0000014C: 614F  ;         JNE NotEight
0000014D: 0249  ;         LDA Eight_Segment
0000014E: 4173  ;         JMP write_digit3
0000014F:       ; 
0000014F:       ;         NotEight
0000014F: 2254  ;         ADD Eight
00000150: 3253  ;         SUB Seven
00000151: 6154  ;         JNE NotSeven
00000152: 0248  ;         LDA Seven_Segment
00000153: 4173  ;         JMP write_digit3
00000154:       ; 
00000154:       ;         NotSeven
00000154: 2253  ;         ADD Seven
00000155: 3252  ;         SUB Six
00000156: 6159  ;         JNE NotSix
00000157: 0247  ;         LDA Six_Segment
00000158: 4173  ;         JMP write_digit3
00000159:       ; 
00000159:       ;         NotSix
00000159: 2252  ;         ADD Six
0000015A: 3251  ;         SUB Five
0000015B: 615E  ;         JNE NotFive
0000015C: 0246  ;         LDA Five_Segment
0000015D: 4173  ;         JMP write_digit3
0000015E:       ; 
0000015E:       ;         NotFive
0000015E: 2251  ;         ADD Five
0000015F: 3250  ;         SUB Four
00000160: 6163  ;         JNE NotFour
00000161: 0245  ;         LDA Four_Segment
00000162: 4173  ;         JMP write_digit3
00000163:       ; 
00000163:       ;         NotFour
00000163: 2250  ;         ADD Four
00000164: 324F  ;         SUB Three
00000165: 6168  ;         JNE NotThree
00000166: 0244  ;         LDA Three_Segment
00000167: 4173  ;         JMP write_digit3
00000168:       ; 
00000168:       ;         NotThree
00000168: 224F  ;         ADD Three
00000169: 324E  ;         SUB Two
0000016A: 616D  ;         JNE NotTwo
0000016B: 0243  ;         LDA Two_Segment
0000016C: 4173  ;         JMP write_digit3
0000016D:       ; 
0000016D:       ;         NotTwo
0000016D: 224E  ;         ADD Two
0000016E: 324D  ;         SUB One
0000016F: 6172  ;         JNE NotOne
00000170: 0242  ;         LDA One_Segment
00000171: 4173  ;         JMP write_digit3
00000172:       ; 
00000172:       ;         NotOne
00000172: 0241  ;         LDA Zero_Segment
00000173:       ; 
00000173:       ;         write_digit3
00000173: 1FF8  ;         STA Digit3
00000174:       ; 
00000174: 025D  ; LDA Units
00000175:       ; 
00000175: 3255  ;         SUB Nine
00000176: 6179  ;         JNE NotNine_one
00000177: 024A  ;         LDA Nine_Segment
00000178: 41A2  ;         JMP write_digit2
00000179:       ; 
00000179:       ;         NotNine_one
00000179: 2255  ;         ADD Nine
0000017A: 3254  ;         SUB Eight
0000017B: 617E  ;         JNE NotEight_one
0000017C: 0249  ;         LDA Eight_Segment
0000017D: 41A2  ;         JMP write_digit2
0000017E:       ; 
0000017E:       ;         NotEight_one
0000017E: 2254  ;         ADD Eight
0000017F: 3253  ;         SUB Seven
00000180: 6183  ;         JNE NotSeven_one
00000181: 0248  ;         LDA Seven_Segment
00000182: 41A2  ;         JMP write_digit2
00000183:       ; 
00000183:       ;         NotSeven_one
00000183: 2253  ;         ADD Seven
00000184: 3252  ;         SUB Six
00000185: 6188  ;         JNE NotSix_one
00000186: 0247  ;         LDA Six_Segment
00000187: 41A2  ;         JMP write_digit2
00000188:       ; 
00000188:       ;         NotSix_one
00000188: 2252  ;         ADD Six
00000189: 3251  ;         SUB Five
0000018A: 618D  ;         JNE NotFive_one
0000018B: 0246  ;         LDA Five_Segment
0000018C: 41A2  ;         JMP write_digit2
0000018D:       ; 
0000018D:       ;         NotFive_one
0000018D: 2251  ;         ADD Five
0000018E: 3250  ;         SUB Four
0000018F: 6192  ;         JNE NotFour_one
00000190: 0245  ;         LDA Four_Segment
00000191: 41A2  ;         JMP write_digit2
00000192:       ; 
00000192:       ;         NotFour_one
00000192: 2250  ;         ADD Four
00000193: 324F  ;         SUB Three
00000194: 6197  ;         JNE NotThree_one
00000195: 0244  ;         LDA Three_Segment
00000196: 41A2  ;         JMP write_digit2
00000197:       ; 
00000197:       ;         NotThree_one
00000197: 224F  ;         ADD Three
00000198: 324E  ;         SUB Two
00000199: 619C  ;         JNE NotTwo_one
0000019A: 0243  ;         LDA Two_Segment
0000019B: 41A2  ;         JMP write_digit2
0000019C:       ; 
0000019C:       ;         NotTwo_one
0000019C: 224E  ;         ADD Two
0000019D: 324D  ;         SUB One
0000019E: 61A1  ;         JNE NotOne_one
0000019F: 0242  ;         LDA One_Segment
000001A0: 41A2  ;         JMP write_digit2
000001A1:       ; 
000001A1:       ;         NotOne_one
000001A1: 0241  ;         LDA Zero_Segment
000001A2:       ; 
000001A2:       ;         write_digit2
000001A2: 224B  ;         ADD DP
000001A3: 1FF7  ;         STA Digit2
000001A4:       ; 
000001A4: 025E  ; LDA Tenths
000001A5:       ; 
000001A5: 3255  ;         SUB Nine
000001A6: 61A9  ;         JNE NotNine_two
000001A7: 024A  ;         LDA Nine_Segment
000001A8: 41D2  ;         JMP write_digit1
000001A9:       ; 
000001A9:       ;         NotNine_two
000001A9: 2255  ;         ADD Nine
000001AA: 3254  ;         SUB Eight
000001AB: 61AE  ;         JNE NotEight_two
000001AC: 0249  ;         LDA Eight_Segment
000001AD: 41D2  ;         JMP write_digit1
000001AE:       ; 
000001AE:       ;         NotEight_two
000001AE: 2254  ;         ADD Eight
000001AF: 3253  ;         SUB Seven
000001B0: 61B3  ;         JNE NotSeven_two
000001B1: 0248  ;         LDA Seven_Segment
000001B2: 41D2  ;         JMP write_digit1
000001B3:       ; 
000001B3:       ;         NotSeven_two
000001B3: 2253  ;         ADD Seven
000001B4: 3252  ;         SUB Six
000001B5: 61B8  ;         JNE NotSix_two
000001B6: 0247  ;         LDA Six_Segment
000001B7: 41D2  ;         JMP write_digit1
000001B8:       ; 
000001B8:       ;         NotSix_two
000001B8: 2252  ;         ADD Six
000001B9: 3251  ;         SUB Five
000001BA: 61BD  ;         JNE NotFive_two
000001BB: 0246  ;         LDA Five_Segment
000001BC: 41D2  ;         JMP write_digit1
000001BD:       ; 
000001BD:       ;         NotFive_two
000001BD: 2251  ;         ADD Five
000001BE: 3250  ;         SUB Four
000001BF: 61C2  ;         JNE NotFour_two
000001C0: 0245  ;         LDA Four_Segment
000001C1: 41D2  ;         JMP write_digit1
000001C2:       ; 
000001C2:       ;         NotFour_two
000001C2: 2250  ;         ADD Four
000001C3: 324F  ;         SUB Three
000001C4: 61C7  ;         JNE NotThree_two
000001C5: 0244  ;         LDA Three_Segment
000001C6: 41D2  ;         JMP write_digit1
000001C7:       ; 
000001C7:       ;         NotThree_two
000001C7: 224F  ;         ADD Three
000001C8: 324E  ;         SUB Two
000001C9: 61CC  ;         JNE NotTwo_two
000001CA: 0243  ;         LDA Two_Segment
000001CB: 41D2  ;         JMP write_digit1
000001CC:       ; 
000001CC:       ;         NotTwo_two
000001CC: 224E  ;         ADD Two
000001CD: 324D  ;         SUB One
000001CE: 61D1  ;         JNE NotOne_two
000001CF: 0242  ;         LDA One_Segment
000001D0: 41D2  ;         JMP write_digit1
000001D1:       ; 
000001D1:       ;         NotOne_two
000001D1: 0241  ;         LDA Zero_Segment
000001D2:       ; 
000001D2:       ;         write_digit1
000001D2: 1FF6  ;         STA Digit1
000001D3:       ; 
000001D3: 025F  ; LDA Hundreths
000001D4:       ; 
000001D4: 3255  ;         SUB Nine
000001D5: 61D8  ;         JNE NotNine_three
000001D6: 024A  ;         LDA Nine_Segment
000001D7: 4201  ;         JMP write_digit0
000001D8:       ;         
000001D8:       ;         NotNine_three
000001D8: 2255  ;         ADD Nine
000001D9: 3254  ;         SUB Eight
000001DA: 61DD  ;         JNE NotEight_three
000001DB: 0249  ;         LDA Eight_Segment
000001DC: 4201  ;         JMP write_digit0
000001DD:       ;         
000001DD:       ;         NotEight_three
000001DD: 2254  ;         ADD Eight
000001DE: 3253  ;         SUB Seven
000001DF: 61E2  ;         JNE NotSeven_three
000001E0: 0248  ;         LDA Seven_Segment
000001E1: 4201  ;         JMP write_digit0
000001E2:       ;         
000001E2:       ;         NotSeven_three
000001E2: 2253  ;         ADD Seven
000001E3: 3252  ;         SUB Six
000001E4: 61E7  ;         JNE NotSix_three
000001E5: 0247  ;         LDA Six_Segment
000001E6: 4201  ;         JMP write_digit0
000001E7:       ;         
000001E7:       ;         NotSix_three
000001E7: 2252  ;         ADD Six
000001E8: 3251  ;         SUB Five
000001E9: 61EC  ;         JNE NotFive_three
000001EA: 0246  ;         LDA Five_Segment
000001EB: 4201  ;         JMP write_digit0
000001EC:       ;         
000001EC:       ;         NotFive_three
000001EC: 2251  ;         ADD Five
000001ED: 3250  ;         SUB Four
000001EE: 61F1  ;         JNE NotFour_three
000001EF: 0245  ;         LDA Four_Segment
000001F0: 4201  ;         JMP write_digit0
000001F1:       ;         
000001F1:       ;         NotFour_three
000001F1: 2250  ;         ADD Four
000001F2: 324F  ;         SUB Three
000001F3: 61F6  ;         JNE NotThree_three
000001F4: 0244  ;         LDA Three_Segment
000001F5: 4201  ;         JMP write_digit0
000001F6:       ;         
000001F6:       ;         NotThree_three
000001F6: 224F  ;         ADD Three
000001F7: 324E  ;         SUB Two
000001F8: 61FB  ;         JNE NotTwo_three
000001F9: 0243  ;         LDA Two_Segment
000001FA: 4201  ;         JMP write_digit0
000001FB:       ;         
000001FB:       ;         NotTwo_three
000001FB: 224E  ;         ADD Two
000001FC: 324D  ;         SUB One
000001FD: 6200  ;         JNE NotOne_three
000001FE: 0242  ;         LDA One_Segment
000001FF: 4201  ;         JMP write_digit0
00000200:       ;         
00000200:       ;         NotOne_three
00000200: 0241  ;         LDA Zero_Segment
00000201:       ;         
00000201:       ;         write_digit0
00000201: 1FF5  ;         STA Digit0
00000202:       ; 
00000202:       ; ; add pause for two seconds 
00000202:       ; 
00000202: 0259  ; LDA Thousand
00000203: 1266  ; STA temp
00000204: 0262  ; LDA Delay 
00000205: 1267  ; STA tempOne
00000206:       ; 
00000206:       ;                 inner_loop_two_seconds
00000206: 0267  ;                 LDA tempOne
00000207: 324D  ;                 SUB One
00000208: 1267  ;                 STA tempOne
00000209: 6206  ;                 JNE inner_loop_two_seconds 
0000020A:       ;                 ; at this point we should of hade a (roughly 1ms delay)
0000020A:       ; 
0000020A: 0262  ;         LDA Delay ; reinitialise the loop
0000020B: 1267  ;         STA tempOne
0000020C:       ; 
0000020C: 0266  ;         LDA temp
0000020D: 324D  ;         SUB One
0000020E: 1266  ;         STA temp
0000020F: 6206  ;         JNE inner_loop_two_seconds
00000210:       ; 
00000210:       ; reset
00000210: 024C  ;         LDA Zero
00000211: 1FF5  ;         STA Digit0
00000212: 1FF6  ;         STA Digit1
00000213: 1FF7  ;         STA Digit2
00000214: 1FF8  ;         STA Digit3
00000215: 1FF9  ;         STA Digit4
00000216: 1FFA  ;         STA Digit5
00000217: 1FFF  ;         STA TrafficLights
00000218: 125B  ;         STA TenMsCounter
00000219:       ; 
00000219: 0265  ;         LDA game_end
0000021A: 6220  ;         JNE endAfterReset
0000021B: 4001  ;         JMP main
0000021C:       ; 
0000021C:       ; end
0000021C: 0265  ;         LDA game_end
0000021D: 224D  ;         ADD One
0000021E: 1265  ;         STA game_end
0000021F: 4210  ;         JMP reset
00000220:       ; 
00000220:       ; endAfterReset
00000220: 0228  ;         LDA B_Segment
00000221: 1FF7  ;         STA Digit2
00000222: 023F  ;         LDA Y_Segment
00000223: 1FF6  ;         STA Digit1
00000224: 022B  ;         LDA E_Segment
00000225: 1FF5  ;         STA Digit0
00000226:       ; 
00000226: 7000  ; STP
00000227:       ; 
00000227:       ; ;  ################       value storage area        ####################
00000227:       ; 
00000227: 00F7  ; A_Segment DEFW &F7   
00000228: 128F  ; B_Segment DEFW &128F  
00000229: 0039  ; C_Segment DEFW &39   
0000022A: 120F  ; D_Segment DEFW &120F  
0000022B: 00F9  ; E_Segment DEFW &F9   
0000022C: 00F1  ; F_Segment DEFW &F1   
0000022D: 00BD  ; G_Segment DEFW &BD   
0000022E: 00F6  ; H_Segment DEFW &F6   
0000022F: 1209  ; I_Segment DEFW &1209
00000230: 001E  ; J_Segment DEFW &1E   
00000231: 2470  ; K_Segment DEFW &2470
00000232: 0038  ; L_Segment DEFW &38  
00000233: 0536  ; M_Segment DEFW &536  
00000234: 2136  ; N_Segment DEFW &2136 
00000235: 003F  ; O_Segment DEFW &3F   
00000236: 00F3  ; P_Segment DEFW &F3  
00000237: 203F  ; Q_Segment DEFW &203F 
00000238: 20F3  ; R_Segment DEFW &20F3 
00000239: 018D  ; S_Segment DEFW &18D  
0000023A: 1201  ; T_Segment DEFW &1201 
0000023B: 003E  ; U_Segment DEFW &3E   
0000023C: 0C30  ; V_Segment DEFW &C30  
0000023D: 2836  ; W_Segment DEFW &2836 
0000023E: 2D00  ; X_Segment DEFW &2D00 
0000023F: 1500  ; Y_Segment DEFW &1500 
00000240: 0C09  ; Z_Segment DEFW &C09  
00000241:       ; 
00000241: 0C3F  ; Zero_Segment    DEFW &C3F  
00000242: 0406  ; One_Segment     DEFW &406  
00000243: 00DB  ; Two_Segment     DEFW &DB  
00000244: 008F  ; Three_Segment   DEFW &8F  
00000245: 00E6  ; Four_Segment    DEFW &E6  
00000246: 00ED  ; Five_Segment    DEFW &ED  
00000247: 00FD  ; Six_Segment     DEFW &FD  
00000248: 1401  ; Seven_Segment   DEFW &1401 
00000249: 00FF  ; Eight_Segment   DEFW &FF  
0000024A: 00E7  ; Nine_Segment    DEFW &E7  
0000024B: 4000  ; DP              DEFW 0b100000000000000
0000024C:       ; 
0000024C: 0000  ; Zero    DEFW 0  
0000024D: 0001  ; One     DEFW 1  
0000024E: 0002  ; Two     DEFW 2  
0000024F: 0003  ; Three   DEFW 3  
00000250: 0004  ; Four    DEFW 4  
00000251: 0005  ; Five    DEFW 5  
00000252: 0006  ; Six     DEFW 6  
00000253: 0007  ; Seven   DEFW 7  
00000254: 0008  ; Eight   DEFW 8  
00000255: 0009  ; Nine    DEFW 9  
00000256:       ; 
00000256:       ; 
00000256: 0000  ; Time            DEFW 0
00000257: 000A  ; Ten             DEFW 10
00000258: 0064  ; Hundred             DEFW 100
00000259: 03E8  ; Thousand        DEFW 1000
0000025A: 2710  ; TenThousand        DEFW 10000
0000025B: 0000  ; TenMsCounter    DEFW 0
0000025C:       ; 
0000025C: 0000  ; Tens            DEFW 0 
0000025D: 0000  ; Units           DEFW 0
0000025E: 0000  ; Tenths          DEFW 0
0000025F: 0000  ; Hundreths       DEFW 0
00000260:       ; 
00000260: 0000  ; Counter         DEFW 0 ; this will store the time taken for them to click the correct button
00000261: 7FFE  ; MaxPos          DEFW 32766
00000262: 02EE  ; Delay           DEFW 750 ; This is the delay for 1ms using the given formula on the exercise sheet an
                ; d a 3Mhz clock
00000263: 0000  ; delayLoop       DEFW 0; this is how many times the delay counter should run in order to produce a 1ms
                ;  delay
00000264: 0000  ; ToCheck         DEFW 0
00000265: 0000  ; game_end        DEFW 0
00000266:       ; 
00000266: 0000  ; temp            DEFW 0
00000267: 0000  ; tempOne         DEFW 0
00000268:       ; 
00000268: 8A53  ; BuzzerNoiseOne  DEFW 0x8A53
00000269: 8A51  ; BuzzerNoiseTwo  DEFW 0x8A51
0000026A: 8A50  ; BuzzerNoiseThree  DEFW 0x8A50
0000026B: 0AFF  ; BuzzerNoiseFour DEFW 0xAFF
0000026C:       ; 
0000026C:       ; 
0000026C:       ; ; These are values for for the pseudo random generator which uses Linear Congruential Generator
0000026C: 0258  ; mod     DEFW 600
0000026D: 003F  ; inc     DEFW 63
0000026E: 0015  ; mul     DEFW 21
0000026F: 01D8  ; seed    DEFW 472 ; This is the starting value
00000270:       ; 
00000270:       ; ; these are the values for the button random number generator
00000270:       ; 
00000270: 0000  ; useOne DEFW 0 ; if this is the flag which will alternate between which random number should be used
00000271:       ; 
00000271: 0004  ; mod_button      DEFW 4 ; max is 3 since there are 4 buttons
00000272: 0003  ; inc_one         DEFW 3
00000273: 0001  ; mul_one         DEFW 1
00000274: 0000  ; seed_one        DEFW 0; This is the starting value
00000275:       ; 
00000275: 0000  ; inc_two         DEFW 0
00000276: 0003  ; mul_two         DEFW 3
00000277: 0001  ; seed_two        DEFW 1; This is the starting value
00000278:       ; 
00000278:       ; ; formula is seed = (mul*seed + inc) % mod 
00000278:       ; 
00000278:       ; 
00000278: 0001  ; PEDCROSS_GREEN          DEFW 0b1
00000279: 0002  ; PEDCROSS_AMBER          DEFW 0b10
0000027A: 0004  ; PEDCROSS_RED            DEFW 0b100
0000027B: 0008  ; PEDCROSSPED_RED         DEFW 0b1000
0000027C: 0010  ; PEDCROSSPED_GREEN       DEFW 0b10000
0000027D: 0020  ; TRAFFICUP_GREEN         DEFW 0b100000
0000027E: 0040  ; TRAFFICUP_AMBER         DEFW 0b1000000
0000027F: 0080  ; TRAFFICUP_RED           DEFW 0b10000000
00000280: 0100  ; TRAFFICLEFT_GREEN       DEFW 0b100000000
00000281: 0200  ; TRAFFICLEFT_AMBER       DEFW 0b1000000000
00000282: 0400  ; TRAFFICLEFT_RED         DEFW 0b10000000000
00000283:       ; 
00000283:       ; 
00000283:       ; ; 0001 - light is 1 - PEDCROSS_GREEN
00000283:       ; ; 0010 - light is 10000 - PEDCROSSPED_GREEN
00000283:       ; ; 0100 - light is 100000 - TRAFFICUP_GREEN
00000283:       ; ; 1000 - light is 100000000 - TRAFFICLEFT_GREEN
00000283:       ; 
00000283:       ; 
00000FF0:       ; ORG &FF0
00000FF0: 0000  ; Simple          DEFW &0
00000FF1: 0000  ; Buttons         DEFW &0
00000FF2: 0000  ; Keypad          DEFW &0
00000FF3: 0000  ; BuzzerStatus    DEFW &0
00000FF4: 0000  ; LEDS            DEFW &0
00000FF5: 0000  ; Digit0          DEFW &0
00000FF6: 0000  ; Digit1          DEFW &0
00000FF7: 0000  ; Digit2          DEFW &0
00000FF8: 0000  ; Digit3          DEFW &0
00000FF9: 0000  ; Digit4          DEFW &0
00000FFA: 0000  ; Digit5          DEFW &0
00000FFB:       ; 
00000FFD:       ; ORG &FFD
00000FFD: 0000  ; Buzzer DEFW 0
00000FFE:       ; 
00000FFF:       ; ORG &FFF
00000FFF: 0000  ; TrafficLights DEFW &0
00001000:       ; 
00001000:       ; 
00001000:       ; 
00001000:       ; ; From running the formula in a python instance, seed should be 7430 so the delay between red and amb
                ; er should be roughly 7.4 seconds
00001000:       ; ; Next, seed should be 6093 so delay between amber and green should be 6 seconds
00001000:       ; 
00001000:       ; ; for the button the chosen One should be 0
00001000:       ; 
00001000:       ; ; on second run of the game pause between red and amber should be 63 ms
00001000:       ; ; amber and green should be 1.3 seconds
00001000:       ; ; the button to press should be 0 again
00001000:       ; 
00001000:       ; 

Symbol Table: Labels
: main                              00000001  Local --
: write_play                        00000002  Local --
: DISPLAY_YES_NO_LIGHTS             0000000B  Local --
: wait_play_input                   00000011  Local --
: parse_input                       00000014  Local --
: write_wait                        0000001B  Local --
: check_buzzer                      0000002A  Local --
: buzzer_one                        0000002C  Local --
: random_one                        0000002E  Local --
: Multiply_loop                     00000030  Local --
: mod_loop                          0000003A  Local --
: inner_loop                        00000042  Local --
: check_buzzer_one                  0000004C  Local --
: random_two                        00000055  Local --
: Multiply_loop_two                 00000057  Local --
: mod_loop_two                      00000061  Local --
: inner_loop_two                    00000069  Local --
: random_button_two                 00000079  Local --
: Multiply_loop_button_two          0000007B  Local --
: mod_loop_button_two               00000084  Local --
: gen_using_one                     0000008A  Local --
: random_button_one                 0000008C  Local --
: Multiply_loop_button_one          0000008E  Local --
: mod_loop_button_one               00000098  Local --
: calculate_button_bit_pattern      0000009D  Local --
: shift_left                        000000A2  Local --
: show_correct_green                000000A9  Local --
: show_two_green                    000000B8  Local --
: show_three_green                  000000BB  Local --
: show_four_green                   000000BE  Local --
: buzz_go                           000000C0  Local --
: check_buzzer_two                  000000C0  Local --
: show_press                        000000C4  Local --
: wait_for_input                    000000D1  Local --
: ms_counter                        000000D9  Local --
: wrong_buzz                        000000E0  Local --
: check_buzzer_three                000000E0  Local --
: validate_input                    000000E5  Local --
: tenth_loop                        000000E8  Local --
: hundreths_loop                    000000ED  Local --
: hundred_loop_div                  000000F7  Local --
: seconds                           000000FD  Local --
: units_loop                        000000FE  Local --
: thousand_loop_div                 00000104  Local --
: tens_loop                         0000010B  Local --
: ten_thousand_loop_div             00000112  Local --
: show_you                          00000118  Local --
: inner_loop_one_second             00000125  Local --
: show_took                         0000012F  Local --
: inner_loop_one_second_again       0000013B  Local --
: NotNine                           0000014A  Local --
: NotEight                          0000014F  Local --
: NotSeven                          00000154  Local --
: NotSix                            00000159  Local --
: NotFive                           0000015E  Local --
: NotFour                           00000163  Local --
: NotThree                          00000168  Local --
: NotTwo                            0000016D  Local --
: NotOne                            00000172  Local --
: write_digit3                      00000173  Local --
: NotNine_one                       00000179  Local --
: NotEight_one                      0000017E  Local --
: NotSeven_one                      00000183  Local --
: NotSix_one                        00000188  Local --
: NotFive_one                       0000018D  Local --
: NotFour_one                       00000192  Local --
: NotThree_one                      00000197  Local --
: NotTwo_one                        0000019C  Local --
: NotOne_one                        000001A1  Local --
: write_digit2                      000001A2  Local --
: NotNine_two                       000001A9  Local --
: NotEight_two                      000001AE  Local --
: NotSeven_two                      000001B3  Local --
: NotSix_two                        000001B8  Local --
: NotFive_two                       000001BD  Local --
: NotFour_two                       000001C2  Local --
: NotThree_two                      000001C7  Local --
: NotTwo_two                        000001CC  Local --
: NotOne_two                        000001D1  Local --
: write_digit1                      000001D2  Local --
: NotNine_three                     000001D8  Local --
: NotEight_three                    000001DD  Local --
: NotSeven_three                    000001E2  Local --
: NotSix_three                      000001E7  Local --
: NotFive_three                     000001EC  Local --
: NotFour_three                     000001F1  Local --
: NotThree_three                    000001F6  Local --
: NotTwo_three                      000001FB  Local --
: NotOne_three                      00000200  Local --
: write_digit0                      00000201  Local --
: inner_loop_two_seconds            00000206  Local --
: reset                             00000210  Local --
: end                               0000021C  Local --
: endAfterReset                     00000220  Local --
: A_Segment                         00000227  Local --
: B_Segment                         00000228  Local --
: C_Segment                         00000229  Local --
: D_Segment                         0000022A  Local --
: E_Segment                         0000022B  Local --
: F_Segment                         0000022C  Local --
: G_Segment                         0000022D  Local --
: H_Segment                         0000022E  Local --
: I_Segment                         0000022F  Local --
: J_Segment                         00000230  Local --
: K_Segment                         00000231  Local --
: L_Segment                         00000232  Local --
: M_Segment                         00000233  Local --
: N_Segment                         00000234  Local --
: O_Segment                         00000235  Local --
: P_Segment                         00000236  Local --
: Q_Segment                         00000237  Local --
: R_Segment                         00000238  Local --
: S_Segment                         00000239  Local --
: T_Segment                         0000023A  Local --
: U_Segment                         0000023B  Local --
: V_Segment                         0000023C  Local --
: W_Segment                         0000023D  Local --
: X_Segment                         0000023E  Local --
: Y_Segment                         0000023F  Local --
: Z_Segment                         00000240  Local --
: Zero_Segment                      00000241  Local --
: One_Segment                       00000242  Local --
: Two_Segment                       00000243  Local --
: Three_Segment                     00000244  Local --
: Four_Segment                      00000245  Local --
: Five_Segment                      00000246  Local --
: Six_Segment                       00000247  Local --
: Seven_Segment                     00000248  Local --
: Eight_Segment                     00000249  Local --
: Nine_Segment                      0000024A  Local --
: DP                                0000024B  Local --
: Zero                              0000024C  Local --
: One                               0000024D  Local --
: Two                               0000024E  Local --
: Three                             0000024F  Local --
: Four                              00000250  Local --
: Five                              00000251  Local --
: Six                               00000252  Local --
: Seven                             00000253  Local --
: Eight                             00000254  Local --
: Nine                              00000255  Local --
: Time                              00000256  Local --
: Ten                               00000257  Local --
: Hundred                           00000258  Local --
: Thousand                          00000259  Local --
: TenThousand                       0000025A  Local --
: TenMsCounter                      0000025B  Local --
: Tens                              0000025C  Local --
: Units                             0000025D  Local --
: Tenths                            0000025E  Local --
: Hundreths                         0000025F  Local --
: Counter                           00000260  Local --
: MaxPos                            00000261  Local --
: Delay                             00000262  Local --
: delayLoop                         00000263  Local --
: ToCheck                           00000264  Local --
: game_end                          00000265  Local --
: temp                              00000266  Local --
: tempOne                           00000267  Local --
: BuzzerNoiseOne                    00000268  Local --
: BuzzerNoiseTwo                    00000269  Local --
: BuzzerNoiseThree                  0000026A  Local --
: BuzzerNoiseFour                   0000026B  Local --
: mod                               0000026C  Local --
: inc                               0000026D  Local --
: mul                               0000026E  Local --
: seed                              0000026F  Local --
: useOne                            00000270  Local --
: mod_button                        00000271  Local --
: inc_one                           00000272  Local --
: mul_one                           00000273  Local --
: seed_one                          00000274  Local --
: inc_two                           00000275  Local --
: mul_two                           00000276  Local --
: seed_two                          00000277  Local --
: PEDCROSS_GREEN                    00000278  Local --
: PEDCROSS_AMBER                    00000279  Local --
: PEDCROSS_RED                      0000027A  Local --
: PEDCROSSPED_RED                   0000027B  Local --
: PEDCROSSPED_GREEN                 0000027C  Local --
: TRAFFICUP_GREEN                   0000027D  Local --
: TRAFFICUP_AMBER                   0000027E  Local --
: TRAFFICUP_RED                     0000027F  Local --
: TRAFFICLEFT_GREEN                 00000280  Local --
: TRAFFICLEFT_AMBER                 00000281  Local --
: TRAFFICLEFT_RED                   00000282  Local --
: Simple                            00000FF0  Local --
: Buttons                           00000FF1  Local --
: Keypad                            00000FF2  Local --
: BuzzerStatus                      00000FF3  Local --
: LEDS                              00000FF4  Local --
: Digit0                            00000FF5  Local --
: Digit1                            00000FF6  Local --
: Digit2                            00000FF7  Local --
: Digit3                            00000FF8  Local --
: Digit4                            00000FF9  Local --
: Digit5                            00000FFA  Local --
: Buzzer                            00000FFD  Local --
: TrafficLights                     00000FFF  Local --
